// <auto-generated />
using System;
using Command.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Command.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421145853_RemoveIsDeletedUser")]
    partial class RemoveIsDeletedUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Command.Domain.Entities.BlackListToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<string>("TokenRevoked")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token_revoked");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("black_list_token", (string)null);
                });

            modelBuilder.Entity("Command.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment_text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_comment_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("comment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentText = "content-1",
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 509, DateTimeKind.Utc).AddTicks(6185),
                            IsDeleted = false,
                            ParentCommentId = 0,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommentText = "content-2",
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 509, DateTimeKind.Utc).AddTicks(6194),
                            IsDeleted = false,
                            ParentCommentId = 0,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CommentText = "content-3",
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 509, DateTimeKind.Utc).AddTicks(6196),
                            IsDeleted = false,
                            ParentCommentId = 0,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CommentText = "content-4",
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 509, DateTimeKind.Utc).AddTicks(6197),
                            IsDeleted = false,
                            ParentCommentId = 0,
                            PostId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.EmailToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("email_token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expired_at");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("email_token", (string)null);
                });

            modelBuilder.Entity("Command.Domain.Entities.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("follow_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FollowedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("followed_at");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int")
                        .HasColumnName("followed_id");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("follower_id");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("follow", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FollowedAt = new DateTime(2025, 4, 21, 14, 58, 52, 513, DateTimeKind.Utc).AddTicks(2234),
                            FollowedId = 2,
                            FollowerId = 1
                        },
                        new
                        {
                            Id = 2,
                            FollowedAt = new DateTime(2025, 4, 21, 14, 58, 52, 513, DateTimeKind.Utc).AddTicks(2237),
                            FollowedId = 1,
                            FollowerId = 2
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("NotificationAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("notification_at");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("RecipientUserId")
                        .HasColumnType("int")
                        .HasColumnName("recipient_user_id");

                    b.Property<int?>("ReplayForCommentId")
                        .HasColumnType("int")
                        .HasColumnName("replay_for_comment_id");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit")
                        .HasColumnName("seen");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notification_type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("ReplayForCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("notification", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentId = 1,
                            NotificationAt = new DateTime(2025, 4, 21, 21, 58, 52, 518, DateTimeKind.Local).AddTicks(9900),
                            PostId = 1,
                            RecipientUserId = 1,
                            Seen = false,
                            Type = "Comment",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            NotificationAt = new DateTime(2025, 4, 21, 21, 58, 52, 518, DateTimeKind.Local).AddTicks(9963),
                            RecipientUserId = 2,
                            Seen = false,
                            Type = "Follow",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            NotificationAt = new DateTime(2025, 4, 21, 21, 58, 52, 518, DateTimeKind.Local).AddTicks(9965),
                            PostId = 2,
                            RecipientUserId = 1,
                            Seen = false,
                            Type = "CreatePost",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit")
                        .HasColumnName("is_published");

                    b.Property<string>("PostSummary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_summary");

                    b.Property<int>("PostTextId")
                        .HasColumnType("int")
                        .HasColumnName("post_text_id");

                    b.Property<string>("PostThumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_thumbnail");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_title");

                    b.Property<int>("TotalComments")
                        .HasColumnType("int")
                        .HasColumnName("total_comments");

                    b.Property<int>("TotalReactions")
                        .HasColumnType("int")
                        .HasColumnName("total_reactions");

                    b.Property<int>("TotalReads")
                        .HasColumnType("int")
                        .HasColumnName("total_reads");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostTextId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("post", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            PostSummary = "blog-description-1",
                            PostTextId = 1,
                            PostThumbnail = "banner.png",
                            PostTitle = "blog-title-1",
                            TotalComments = 1,
                            TotalReactions = 1,
                            TotalReads = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            PostSummary = "blog-description-2",
                            PostTextId = 2,
                            PostThumbnail = "banner.png",
                            PostTitle = "blog-title-2",
                            TotalComments = 2,
                            TotalReactions = 2,
                            TotalReads = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.PostReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_reaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int")
                        .HasColumnName("reaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReactionId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId", "ReactionId")
                        .IsUnique();

                    b.ToTable("post_reaction", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 520, DateTimeKind.Utc).AddTicks(4169),
                            IsActived = false,
                            PostId = 1,
                            ReactionId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 520, DateTimeKind.Utc).AddTicks(4172),
                            IsActived = false,
                            PostId = 2,
                            ReactionId = 4,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.PostSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_saved_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("post_saved", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActived = false,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActived = false,
                            PostId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsActived = false,
                            PostId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("post_tag", (string)null);

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            TagId = 1
                        },
                        new
                        {
                            PostId = 2,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.PostText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_text_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_text");

                    b.HasKey("Id");

                    b.ToTable("post_text", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Content Blog 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Content Blog 2"
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReactionDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reaction_description");

                    b.Property<string>("ReactionIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reaction_icon");

                    b.Property<string>("ReactionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reaction_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("reactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 521, DateTimeKind.Utc).AddTicks(8845),
                            IsDeleted = false,
                            ReactionDescription = "reaction-description-1",
                            ReactionIcon = "icon-1.png",
                            ReactionName = "Haha"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 521, DateTimeKind.Utc).AddTicks(8850),
                            IsDeleted = false,
                            ReactionDescription = "reaction-description-2",
                            ReactionIcon = "icon-2.png",
                            ReactionName = "Tim"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 521, DateTimeKind.Utc).AddTicks(8851),
                            IsDeleted = false,
                            ReactionDescription = "reaction-description-3",
                            ReactionIcon = "icon-3.png",
                            ReactionName = "Thích"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 521, DateTimeKind.Utc).AddTicks(8852),
                            IsDeleted = false,
                            ReactionDescription = "reaction-description-4",
                            ReactionIcon = "icon-4.png",
                            ReactionName = "Phẩn nộ"
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("refresh_token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit")
                        .HasColumnName("is_revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Command.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "USER"
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("class_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tag_description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tag_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 522, DateTimeKind.Utc).AddTicks(6700),
                            IsDeleted = false,
                            TagName = "tag-name-test-1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 522, DateTimeKind.Utc).AddTicks(6707),
                            IsDeleted = false,
                            TagName = "tag-name-test-2"
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit")
                        .HasColumnName("is_actived");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsLoginWithGoogle")
                        .HasColumnType("bit")
                        .HasColumnName("is_login_google");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_at");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "default-avatar.png",
                            Bio = "bio-admin",
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 523, DateTimeKind.Utc).AddTicks(792),
                            Email = "admin@gmail.com",
                            FullName = "admin",
                            IsActived = true,
                            IsEmailVerified = true,
                            IsLoginWithGoogle = false,
                            PasswordHash = "$2a$11$GQv/68NdXu.5zUJzUcO8pewLK1WRPlVV.kUlC2vTFjx6woseh7VJa",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "default-avatar.png",
                            Bio = "bio-user",
                            CreatedAt = new DateTime(2025, 4, 21, 14, 58, 52, 643, DateTimeKind.Utc).AddTicks(6982),
                            Email = "user@gmail.com",
                            FullName = "user",
                            IsActived = true,
                            IsEmailVerified = true,
                            IsLoginWithGoogle = false,
                            PasswordHash = "$2a$11$NX8cA0BcdCCQx8f6aRlAzeLZ5fCZUrxweS8UuPcs1lAl0vl/LW92S",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Command.Domain.Entities.BlackListToken", b =>
                {
                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany("BlackListTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Command.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.EmailToken", b =>
                {
                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany("EmailTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.Follow", b =>
                {
                    b.HasOne("Command.Domain.Entities.User", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.User", "Follower")
                        .WithMany("Followeds")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Command.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Command.Domain.Entities.Comment", "Comment")
                        .WithMany("Notifications")
                        .HasForeignKey("CommentId");

                    b.HasOne("Command.Domain.Entities.Post", "Post")
                        .WithMany("Notifications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Command.Domain.Entities.User", "RecipientUser")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.Comment", "ReplayForComment")
                        .WithMany()
                        .HasForeignKey("ReplayForCommentId");

                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("RecipientUser");

                    b.Navigation("ReplayForComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.Post", b =>
                {
                    b.HasOne("Command.Domain.Entities.PostText", "PostText")
                        .WithOne("Post")
                        .HasForeignKey("Command.Domain.Entities.Post", "PostTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostText");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("Command.Domain.Entities.Post", "Post")
                        .WithMany("PostReactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.Reaction", "Reaction")
                        .WithMany("PostReactions")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany("PostReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Reaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.PostSaved", b =>
                {
                    b.HasOne("Command.Domain.Entities.Post", "Post")
                        .WithMany("SavedByUsers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany("PostSaveds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("Command.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Command.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Command.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Command.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Command.Domain.Entities.User", b =>
                {
                    b.HasOne("Command.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Command.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Command.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("PostReactions");

                    b.Navigation("PostTags");

                    b.Navigation("SavedByUsers");
                });

            modelBuilder.Entity("Command.Domain.Entities.PostText", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("Command.Domain.Entities.Reaction", b =>
                {
                    b.Navigation("PostReactions");
                });

            modelBuilder.Entity("Command.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Command.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Command.Domain.Entities.User", b =>
                {
                    b.Navigation("BlackListTokens");

                    b.Navigation("Comments");

                    b.Navigation("EmailTokens");

                    b.Navigation("Followeds");

                    b.Navigation("Followers");

                    b.Navigation("Notifications");

                    b.Navigation("PostReactions");

                    b.Navigation("PostSaveds");

                    b.Navigation("Posts");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
